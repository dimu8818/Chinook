@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <input @bind="SearchTerm" @bind:event="oninput" placeholder="Search artists..." class="right-align" />

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Artist>? Artists;
    private List<Artist>? FilteredArtists;

    [Inject] IDbContextFactory<ChinookContext>? DbFactory { get; set; }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
        FilteredArtists = Artists;
    }

    public async Task<List<Artist>> GetArtists()
    {   
        var dbContext = await DbFactory.CreateDbContextAsync();

        return dbContext.Artists
                            .Include(a => a.Albums)
                            .ToList(); ;
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }

    private async Task FilterArtistsAsync() {
        Artists = await GetArtists();
        if (string.IsNullOrEmpty(SearchTerm)) {
            FilteredArtists = Artists;
        } else {
            FilteredArtists = Artists.Where(a => a.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private string SearchTerm {
        get => _searchTerm;
        set {
            if (_searchTerm != value) {
                _searchTerm = value;
                FilterArtistsAsync();
            }
        }
    }

    private string _searchTerm;

}
